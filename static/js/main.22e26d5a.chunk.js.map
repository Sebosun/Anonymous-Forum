{"version":3,"sources":["components/PostForm.module.css","components/Post.module.css","components/pages/SingleThread.module.css","components/UI/HideElement.module.css","components/ShowPostForm.module.css","components/UploadError.module.css","components/UI/Image.module.css","components/UI/Button.module.css","components/UI/ExpandThread.module.css","components/UI/Image.js","components/UI/HideElement.js","components/Post.js","components/UploadError.js","components/UI/Button.js","components/PostForm.js","components/UI/Roller.js","components/ShowPostForm.js","components/UI/ExpandThread.js","components/Thread.js","components/Threads.js","components/Header.js","components/pages/SingleThread.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Image","props","useState","maxHeight","imgSize","setImgSize","alt","onClick","src","className","styles","postImage","style","HideElement","hideContainer","icon","color","text","Post","postVisible","setPostVisible","textOfHidePost","setTextOfHidePost","classes","postContainer","hideElem","prevState","user","image","posterInfo","id","title","time","toDate","toDateString","toLocaleTimeString","postNo","postText","UploadError","uploadError","message","Button","button","children","PostForm","name","setName","setText","setTitle","setImage","handleError","setHandleError","incrPostNo","a","db","firebase","firestore","increment","FieldValue","collection","doc","update","getNo","get","then","exists","data","resetToDefault","addNewThread","imageName","thread","add","created","serverTimestamp","onSubmit","openCloseForm","catch","error","onFileChange","e","target","files","type","match","console","log","value","onPostSubmit","preventDefault","file","storageRef","storage","ref","fileRef","child","put","getDownloadURL","url","Form","addForm","placeholder","onChange","postName","maxLength","postTitle","required","postFile","accept","postSubmit","Roller","ShowPostForm","showForm","setShowForm","isLoading","setIsLoading","loaderContainer","prev","showButton","ExpandThread","expandThread","cursor","size","Thread","postsCol","setPostsCol","replyVisible","setReplyVisible","threadVisible","setThreadVisible","textOfHideThread","setTextOfHideThread","threadExpansion","setThreadExpansion","threadSize","setThreadSize","getPostsFromThread","expand","orderBy","limit","onSnapshot","serverUpdate","firebasePosts","docs","map","_doc","reverse","clickReply","useEffect","snap","hidden","to","post","Threads","threadArray","Header","chan","desc","SingleThread","params","useParams","threadPost","setThreadPost","where","parseInt","threadID","firebaseThreads","item","length","return","threadContainer","secondThreadContainer","index","App","threadPosts","setThreadPosts","exact","path","display","justifyContent","paddingBottom","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22e26d5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"PostForm_Form__iDZPN\",\"addForm\":\"PostForm_addForm__Cr1uA\",\"postText\":\"PostForm_postText__1ECjE\",\"loaderContainer\":\"PostForm_loaderContainer__lW8uA\",\"postName\":\"PostForm_postName__3GiiG\",\"postTitle\":\"PostForm_postTitle__2-EYt\",\"postFile\":\"PostForm_postFile__20aVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__2H-c_\",\"Post\":\"Post_Post__368RX\",\"postImage\":\"Post_postImage__1hEu_\",\"posterInfo\":\"Post_posterInfo__2JSeC\",\"postText\":\"Post_postText__1BiIH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Thread\":\"SingleThread_Thread__1IKCH\",\"threadContainer\":\"SingleThread_threadContainer__3HP6r\",\"secondThreadContainer\":\"SingleThread_secondThreadContainer__lOppK\",\"return\":\"SingleThread_return__AKn8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hideContainer\":\"HideElement_hideContainer__3kN_x\",\"icon\":\"HideElement_icon__2sEJw\",\"text\":\"HideElement_text__3KNsx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderContainer\":\"ShowPostForm_loaderContainer__1NRKB\",\"showButton\":\"ShowPostForm_showButton__2mtQC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uploadError\":\"UploadError_uploadError__1dDWh\",\"message\":\"UploadError_message__3cAHc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postImage\":\"Image_postImage__2_ySV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__6-R6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"expandThread\":\"ExpandThread_expandThread__N25cj\",\"expand\":\"ExpandThread_expand__2uuWh\"};","import { useState } from \"react\";\nimport styles from \"./Image.module.css\";\n\nconst Image = (props) => {\n  const [imgSize, setImgSize] = useState({\n    maxHeight: \"15vh\",\n  });\n\n  const handleImageSize = () => {\n    if (imgSize.maxHeight === \"15vh\") {\n      setImgSize({\n        maxHeight: \"45vh\",\n      });\n    } else {\n      setImgSize({\n        maxHeight: \"15vh\",\n      });\n    }\n  };\n  return (\n    <img\n      alt=\"\"\n      onClick={handleImageSize}\n      src={props.src}\n      className={styles.postImage}\n      style={imgSize}\n    ></img>\n  );\n};\n\nexport default Image;\n","import styles from \"./HideElement.module.css\";\nimport { IoMdCloseCircleOutline } from \"react-icons/io\";\n\nconst HideElement = (props) => {\n  return (\n    <div onClick={props.onClick} className={styles.hideContainer}>\n      <IoMdCloseCircleOutline className={styles.icon} color=\"#00ff46\" />\n      <div className={styles.text}>{props.text}</div>\n    </div>\n  );\n};\n\nexport default HideElement;\n","import classes from \"./Post.module.css\";\nimport { useState } from \"react\";\nimport Image from \"./UI/Image\";\nimport HideElement from \"./UI/HideElement\";\n\nfunction Post(props) {\n  const [postVisible, setPostVisible] = useState(true);\n  const [textOfHidePost, setTextOfHidePost] = useState(\"\");\n\n  function onHideThread() {\n    setPostVisible((prevState) => !prevState);\n    // this kind of doesnt make sense, but it works fine lmao\n    setTextOfHidePost((prevState) => {\n      if (postVisible === false) {\n        return \"\";\n      } else {\n        return props.user ? props.user : \"Anonymous\";\n      }\n    });\n  }\n  return (\n    <div className={classes.postContainer}>\n      <HideElement\n        className={classes.hideElem}\n        text={textOfHidePost}\n        onClick={onHideThread}\n      />\n      {postVisible && (\n        <div className={classes.Post}>\n          <div>\n            <Image src={props.image} />\n            <div className={classes.posterInfo}>\n              <div id=\"user\">{props.user ? props.user : \"Anonymous\"}</div>\n              <div>{props.title}</div>\n              {props.time && (\n                <div>\n                  {props.time.toDate().toDateString() +\n                    \" \" +\n                    props.time.toDate().toLocaleTimeString()}\n                </div>\n              )}\n              <div className=\"postNo\">No. {props.postNo}</div>\n            </div>\n            <p className={classes.postText}>{props.text}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","import styles from \"./UploadError.module.css\";\n\nconst UploadError = () => {\n  return (\n    <div className={styles.uploadError}>\n      <p className={styles.message}>Please upload an image file</p>\n    </div>\n  );\n};\n\nexport default UploadError;\n","import styles from \"./Button.module.css\";\n\nconst Button = (props) => {\n  return (\n    <button onClick={props.onClick} className={styles.button}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport UploadError from \"./UploadError\";\nimport Button from \"./UI/Button\";\nimport styles from \"./PostForm.module.css\";\nimport { firebase } from \"@firebase/app\";\n\nfunction PostForm(props) {\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [handleError, setHandleError] = useState(false);\n\n  // increases the post number in meta collection\n  async function incrPostNo() {\n    const db = firebase.firestore();\n    const increment = firebase.firestore.FieldValue.increment(1);\n    const postNoRef = db.collection(\"meta\").doc(\"data\");\n    postNoRef.update({ postNo: increment });\n  }\n\n  //gets the postNo from the meta collection\n  function getNo() {\n    const db = firebase.firestore();\n    const data = db.collection(\"meta\").doc(\"data\");\n    const postNo = data.get().then((doc) => {\n      if (doc.exists) {\n        return doc.data().postNo;\n      } else {\n        return 0;\n      }\n    });\n\n    return postNo;\n  }\n\n  function resetToDefault() {\n    setName(\"\");\n    setText(\"\");\n    setTitle(\"\");\n    setImage(null);\n  }\n  // adds new thread to the firebase\n  // based on if its a thread reply or a new tread altogether\n  // if new thread, else post reply\n  async function addNewThread(name, text, title, imageName) {\n    const db = firebase.firestore();\n    const postNo = await getNo();\n    // by default assume its a thread, but if props.thread is false then it's a post\n    let collection = db.collection(\"board\");\n    if (props.thread === false) {\n      collection = db.collection(\"board\").doc(props.id).collection(\"posts\");\n    }\n\n    collection\n      .add({\n        user: name,\n        text: text,\n        title: title,\n        postNo: postNo,\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n        image: imageName,\n      })\n      .then(() => {\n        incrPostNo().then(() => {\n          props.onSubmit();\n          props.openCloseForm();\n        });\n      })\n      .catch((error) => {});\n  }\n\n  // if its an image set state, if not show error\n  const onFileChange = (e) => {\n    if (e.target.files[0].type.match(\"image.*\")) {\n      console.log(e.target.files[0]);\n      setHandleError(false);\n      setImage(e.target.files[0]);\n    } else {\n      setHandleError(true);\n      e.target.value = null;\n    }\n  };\n\n  const onNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const onPostSubmit = async (e) => {\n    e.preventDefault();\n    // props.openCloseForm();\n    props.onSubmit();\n    if (image === null) {\n      addNewThread(name, text, title, \"\");\n      resetToDefault();\n    } else {\n      const file = image;\n      const storageRef = firebase.storage().ref();\n      const fileRef = storageRef.child(file.name);\n      await fileRef.put(file);\n      fileRef.getDownloadURL().then((url) => {\n        addNewThread(name, text, title, url);\n        resetToDefault();\n      });\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.Form}>\n        <form\n          onSubmit={(e) => {\n            onPostSubmit(e);\n          }}\n          className={styles.addForm}\n        >\n          <input\n            placeholder=\"name\"\n            value={name}\n            type=\"text\"\n            onChange={onNameChange}\n            className={styles.postName}\n            maxLength=\"25\"\n          />\n          <input\n            placeholder=\"title\"\n            value={title}\n            type=\"text\"\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n            className={styles.postTitle}\n            maxLength=\"30\"\n          />\n\n          <textarea\n            placeholder=\"comment\"\n            value={text}\n            type=\"text\"\n            onChange={(e) => {\n              setText(e.target.value);\n            }}\n            required\n            className={styles.postText}\n            maxLength=\"1000\"\n          />\n\n          {props.thread ? (\n            <input\n              className={styles.postFile}\n              type=\"file\"\n              onChange={onFileChange}\n              accept=\"image/*\"\n              required\n            />\n          ) : (\n            <input\n              className={styles.postFile}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={onFileChange}\n            />\n          )}\n          <Button className={styles.postSubmit}>Submit</Button>\n        </form>\n      </div>\n      {handleError && <UploadError />}\n    </>\n  );\n}\n\nexport default PostForm;\n","import \"./Roller.css\";\n\nconst Roller = (props) => {\n  return (\n    <div className=\"lds-roller\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Roller;\n","import { useState } from \"react\";\nimport PostForm from \"./PostForm\";\nimport Roller from \"./UI/Roller\";\nimport Button from \"./UI/Button\";\nimport styles from \"./ShowPostForm.module.css\";\n\n// Receives an optional props.id, if thread is true, forwards the post form with na id to\n// the PostForm.\n// If it has post.id and thread is set to true, PostForm knows it's a reply.\n// It takes post.id and uses it to add a reply to a particular thread\nfunction ShowPostForm(props) {\n  const [showForm, setShowForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function openCloseForm() {\n    setShowForm((prevState) => !prevState);\n  }\n\n  const onSubmit = () => {\n    setIsLoading((prev) => !prev);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={styles.loaderContainer}>\n        <Roller />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {showForm ? (\n          <div>\n            <PostForm\n              openCloseForm={openCloseForm}\n              id={props.id}\n              thread={props.thread}\n              onSubmit={onSubmit}\n            />\n            <div className={styles.showButton}>\n              <Button onClick={openCloseForm}>Close</Button>\n            </div>\n          </div>\n        ) : (\n          <div className={styles.showButton}>\n            <Button onClick={openCloseForm}>\n              {`${props.thread ? \"Start a new thread\" : \"Add a reply\"}`}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ShowPostForm;\n","import styles from \"./ExpandThread.module.css\";\nimport { BsBoxArrowInDown } from \"react-icons/bs\";\n\nconst ExpandThread = (props) => {\n  return (\n    <div className={styles.expandThread}>\n      <div>{props.postNo - 3} posts omitted.</div>\n      <BsBoxArrowInDown\n        onClick={props.onClick}\n        color=\"#00ff46\"\n        style={{ cursor: \"pointer\" }}\n        size=\"1.5em\"\n      />\n    </div>\n  );\n};\n\nexport default ExpandThread;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Thread.css\";\nimport Post from \"./Post.js\";\nimport { firebase } from \"@firebase/app\";\nimport { Link } from \"react-router-dom\";\nimport ShowPostForm from \"./ShowPostForm\";\nimport Image from \"./UI/Image\";\nimport HideElement from \"./UI/HideElement\";\nimport ExpandThread from \"./UI/ExpandThread\";\n\nfunction Thread(props) {\n  // TODO clicking postNo should open up form and fill it automatically with >>7\n  const [postsCol, setPostsCol] = useState([]);\n  const [replyVisible, setReplyVisible] = useState(false);\n  const [threadVisible, setThreadVisible] = useState(true);\n\n  const [textOfHideThread, setTextOfHideThread] = useState(\"close\");\n  const [threadExpansion, setThreadExpansion] = useState(false);\n  const [threadSize, setThreadSize] = useState(0);\n\n  const getNumberOfElements = () => {\n    const db = firebase.firestore();\n    db.collection(\"board\")\n      .doc(props.id)\n      .collection(\"posts\")\n      .get()\n      .then((snap) => {\n        setThreadSize(snap.size);\n      });\n  };\n  //TODO the code within those two functions is beeing repeated, could shrink it a bit\n  // TODO theres a bug that if you add a new comment, only the 3 last are displayed, it doesnt add it to the list and doesnt display the \"skipped x amount of posts\"\n  const getPostsFromThread = (expand) => {\n    const db = firebase.firestore();\n    let posts = [];\n    if (expand === \"expand\") {\n      posts = db\n        .collection(\"board\")\n        .doc(props.id)\n        .collection(\"posts\")\n        .orderBy(\"postNo\", \"desc\");\n    } else {\n      posts = db\n        .collection(\"board\")\n        .doc(props.id)\n        .collection(\"posts\")\n        .orderBy(\"postNo\", \"desc\")\n        .limit(3);\n    }\n\n    posts.onSnapshot((serverUpdate) => {\n      const firebasePosts = serverUpdate.docs.map((_doc) => {\n        let data = _doc.data();\n        data.id = _doc.id;\n        return data;\n      });\n      firebasePosts.reverse();\n      setPostsCol(firebasePosts);\n    });\n  };\n\n  function clickReply() {\n    setReplyVisible((prevState) => !prevState);\n  }\n\n  function onHideThread() {\n    setThreadVisible((prevState) => !prevState);\n    setTextOfHideThread((prevState) => {\n      if (prevState === \"close\") {\n        return props.user ? props.user : \"Anyonymous\";\n      } else {\n        return \"close\";\n      }\n    });\n  }\n  function onExpand() {\n    setThreadExpansion(true);\n    getPostsFromThread(\"expand\");\n  }\n\n  // onLoad get posts for a given Thread\n  useEffect(() => {\n    getNumberOfElements();\n    getPostsFromThread(\"nope\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"Thread\">\n      <HideElement text={textOfHideThread} onClick={onHideThread} />\n      {threadVisible && (\n        <div className=\"threadContainer\">\n          {replyVisible && (\n            <ShowPostForm hidden={true} thread={false} id={props.id} />\n          )}\n          <div className=\"threadInfo\">\n            <Image src={props.image} />\n            <div className=\"threadInfoContainer\">\n              <div className=\"user\" id=\"user\">\n                {props.user ? props.user : \"Anyonymous\"}\n              </div>\n              <div className=\"title\">\n                {props.title ? props.title : \"Thread\"}\n              </div>\n              {props.time ? (\n                <div className=\"time\">\n                  {props.time.toDate().toDateString() +\n                    \" \" +\n                    props.time.toDate().toLocaleTimeString()}\n                </div>\n              ) : null}\n              <Link style={{ color: \"#00ff46\" }} to={`/thread/${props.postNo}`}>\n                No. {props.postNo}\n              </Link>\n            </div>\n            <div className=\"postText\">\n              <p>{props.text}</p>\n            </div>\n            {/* likely could be done differently, but it works so... */}\n            {threadExpansion || threadSize - 3 <= 0 ? null : (\n              <ExpandThread onClick={onExpand} postNo={threadSize} />\n            )}\n          </div>\n\n          {postsCol.map((post) => {\n            return (\n              <Post\n                key={post.id}\n                id={post.id}\n                postNo={post.postNo}\n                title={post.title}\n                time={post.created}\n                text={post.text}\n                image={post.image}\n                user={post.user}\n                clickReply={clickReply}\n              />\n            );\n          })}\n          <ShowPostForm thread={false} id={props.id} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Thread;\n","import Thread from \"./Thread\";\n\nconst Threads = (props) => {\n  return (\n    <div className=\"Threads\">\n      {props.threadArray.map((thread) => {\n        return (\n          <Thread\n            key={thread.id}\n            id={thread.id}\n            postNo={thread.postNo}\n            title={thread.title}\n            time={thread.created}\n            text={thread.text}\n            image={thread.image}\n            user={thread.user}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Threads;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <Link to=\"/\">\n        <h1>{props.chan}</h1>\n      </Link>\n      <p>{props.desc}</p>\n    </div>\n  );\n}\n\nexport default Header;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { firebase } from \"@firebase/app\";\nimport { Link } from \"react-router-dom\";\n\nimport Image from \"../UI/Image\";\nimport ShowPostForm from \"../ShowPostForm\";\nimport Post from \"../Post\";\n\nimport classes from \"./SingleThread.module.css\";\n\nconst SingleThread = () => {\n  const params = useParams();\n  const [postsCol, setPostsCol] = useState([]);\n  const [threadPost, setThreadPost] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"board\")\n      .where(\"postNo\", \"==\", parseInt(params.threadID))\n      .onSnapshot((serverUpdate) => {\n        const firebaseThreads = serverUpdate.docs.map((item) => {\n          let data = item.data();\n          data.id = item.id;\n          return data;\n        });\n        console.log(firebaseThreads);\n        // setThreadToDisplay([firebaseThreads[0]]);\n        setThreadPost(firebaseThreads);\n        getPostsFromThread(firebaseThreads[0].id);\n      });\n  }, [params]);\n\n  const getPostsFromThread = (id) => {\n    const db = firebase.firestore();\n    let posts = db\n      .collection(\"board\")\n      .doc(id)\n      .collection(\"posts\")\n      .orderBy(\"postNo\", \"desc\");\n\n    posts.onSnapshot((serverUpdate) => {\n      const firebasePosts = serverUpdate.docs.map((_doc) => {\n        let data = _doc.data();\n        data.id = _doc.id;\n        return data;\n      });\n      firebasePosts.reverse();\n      setPostsCol(firebasePosts);\n    });\n  };\n\n  // TODO special page where no post is found\n  if (threadPost.length === 0) {\n    return null;\n  } else {\n    return (\n      <>\n        <div className={classes.return}>\n          <Link to=\"/\">\n            <div>Return to threads</div>\n          </Link>\n        </div>\n        <div className={classes.Thread}>\n          <div className={classes.threadContainer}>\n            <div className={classes.secondThreadContainer}>\n              <div className=\"threadInfo\">\n                <Image src={threadPost[0].image} />\n                <div className=\"threadInfoContainer\">\n                  <div className=\"user\" id=\"user\">\n                    {threadPost[0].user ? threadPost[0].user : \"Anyonymous\"}\n                  </div>\n                  <div className=\"title\">\n                    {threadPost[0].title ? threadPost[0].title : \"Thread\"}\n                  </div>\n                  {threadPost[0].created && (\n                    <div className=\"time\">\n                      {threadPost[0].created.toDate().toDateString() +\n                        \" \" +\n                        threadPost[0].created.toDate().toLocaleTimeString()}\n                    </div>\n                  )}\n                  <div>No. {threadPost[0].postNo}</div>\n                </div>\n                <div className=\"postText\">\n                  <p>{threadPost[0].text}</p>\n                </div>\n                {/* likely could be done differently, but it works so... */}\n              </div>\n\n              {postsCol.map((post, index) => {\n                return (\n                  <Post\n                    key={index}\n                    id={post.id}\n                    postNo={post.postNo}\n                    title={post.title}\n                    time={post.created}\n                    text={post.text}\n                    image={post.image}\n                    user={post.user}\n                  />\n                );\n              })}\n            </div>\n            <ShowPostForm thread={false} id={threadPost[0].id} />\n          </div>\n        </div>\n      </>\n    );\n  }\n};\n\nexport default SingleThread;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { firebase } from \"@firebase/app\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport Threads from \"./components/Threads\";\nimport Header from \"./components/Header\";\nimport ShowPostForm from \"./components/ShowPostForm\";\nimport SingleThread from \"./components/pages/SingleThread\";\n\nfunction App() {\n  const [threadPosts, setThreadPosts] = useState([]);\n\n  // gets Threas from firestore on first load\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"board\")\n      .orderBy(\"created\", \"desc\")\n      .onSnapshot((serverUpdate) => {\n        const firebaseThreads = serverUpdate.docs.map((item) => {\n          let data = item.data();\n          data.id = item.id;\n          return data;\n        });\n        setThreadPosts(firebaseThreads);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Header\n            chan=\"The Forum\"\n            desc=\"We cannot guarantee that your brain won't explode\"\n          />\n          <ShowPostForm thread={true} />\n          <main>\n            <Threads threadArray={threadPosts} />\n          </main>\n        </Route>\n        <Route path=\"/thread/:threadID\">\n          <Header\n            chan=\"Bes's\"\n            desc=\"Don't tell me you expected some quirky text here\"\n          />\n          <SingleThread />\n        </Route>\n      </Switch>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingBottom: \"10px\",\n        }}\n      >\n        <a href=\"https://github.com/Sebosun/anonymous-forum\">\n          <AiFillGithub color=\"black\" size=\"2em\" />\n        </a>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\nimport { firebase } from \"@firebase/app\";\nrequire(\"firebase/firestore\");\nrequire(\"firebase/storage\");\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9ApQ3Mhbga323RYlXqaW8X73QWtvprAg\",\n  authDomain: \"bes-chan.firebaseapp.com\",\n  projectId: \"bes-chan\",\n  storageBucket: \"bes-chan.appspot.com\",\n  messagingSenderId: \"889845667798\",\n  appId: \"1:889845667798:web:e97a653a43abfcf0963677\",\n  measurementId: \"G-MHY6F8BPC5\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}